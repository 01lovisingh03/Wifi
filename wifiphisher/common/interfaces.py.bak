"""
This module was made to handle all the interface related operations of
the program
"""

import random
import collections
import logging
import pyric
import pyric.pyw as pyw
import dbus
import wifiphisher.common.constants as constants

LOGGER = logging.getLogger("wifiphisher.interfaces")

"""
    def add_virtual_interface(self, card):
        Add the virtual interface to the host system
        :param self: A NetworkManager object
        :param card: A pyw.Card object
        :type self: NetworkManager
        :type card: pyw.Card
        :return name of the interface
        :rtype str
        :..note: when add the interface it is possible raising the
        pyric.error causing by adding the duplicated wlan interface
        name.

        done_flag = True
        number = 0
        while done_flag:
            try:
                number += 1
                name = 'wlan' + str(number)
                pyw.down(card)
                monitor_card = pyw.devadd(card, name, 'monitor')
                done_flag = False
            # catch if wlan1 is already exist
            except pyric.error:
                pass
        self._vifs_add.add(monitor_card)
        return name

    def remove_vifs_added(self):
        Remove all the added virtual interfaces
        :param self: A NetworkManager object
        :type self: NetworkManager
        :return: None
        :rtype: None

        for card in self._vifs_add:
            pyw.devdel(card)
"""


def set_interface_mac(interface_name, mac_address=None, generate_random=True):
    """
    Set the specified MAC address for the interface if generate_random is
    False otherwise set a random MAC address to the interface

    :param interface_name: Name of an interface
    :param mac_address: A MAC address
    :param generate_random: Whether a random MAC address should be
        generated or not
    :type interface_name: str
    :type mac_address: str
    :type random: bool
    :return: True if operation was successful and False otherwise
    :rtype: bool
    .. note: This method will set the interface to managed mode
    """
    address = mac_address
    succeeded = False

    if generate_random:
        address = "00:00:00:{:02x}:{:02x}:{:02x}".format(
            random.randint(0, 255), random.randint(0, 255),
            random.randint(0, 255))

    if address:
        card = pyw.getcard(interface_name)
        set_interface_mode(interface_name, "managed", card)

        try:
            pyw.macset(card, address)
            succeeded = True
        except pyric.error as error:
            LOGGER.warning(
                "MAC address was not changed due to this error:\n{}".format(
                    error))

    return succeeded


def set_interface_mode(interface_name, mode, card=None):
    """
    Set the specified mode for the interface

    :param interface_name: Name of an interface
    :param mode: Mode of an interface
    :param card: The card for the interface
    :type interface_name: str
    :type mode: str
    :type card: pyric.devinfo
    :return: True if successful and False otherwise
    :rtype: bool
    .. note: Available modes are unspecified, ibss, managed, AP
        AP VLAN, wds, monitor, mesh, p2p.
    """
    interface_card = card
    succeeded = False

    if not card:
        interface_card = pyw.getcard(interface_name)

    turn_interface(interface_name, on=False, card=interface_card)

    try:
        pyw.modeset(interface_card, mode)
        succeeded = True
    except pyric.error as error:
        LOGGER.warning("Failed to set {} to {}:\n{}".format(
            interface_name, mode, error))

    turn_interface(interface_name, on=True, card=interface_card)

    return succeeded


def turn_interface(interface_name, on=True, card=None):
    """
    Turn the interface up or down based on the on parameter

    :param interface_name: Name of an interface
    :param on: Turn on or off
    :param card: The card for the interface
    :type interface_name: str
    :type on: bool
    :type card: pyric.devinfo
    :return: True if operation was successful and False otherwise
    :rtype: bool
    """
    interface_card = card
    succeeded = False

    if not card:
        interface_card = pyw.getcard(interface_name)

    try:
        if on:
            pyw.up(interface_card)
        else:
            pyw.down(interface_card)
        succeeded = True
    except pyric.error as error:
        LOGGER.warning("Failed to turn {} {}:\n{}".format(
            interface_name, "ON" if on else "OFF", error))

    return succeeded


def set_interface_channel(interface_name, channel, card=None):
    """
    Set the channel for the interface

    :param interface_name: Name of an interface
    :param channel: A channel number
    :param card: The card for the interface
    :type interface_name: str
    :type channel: int
    :type card: pyric.devinfo
    :return: True if operation was successful and False otherwise
    :rtype: bool
    """

    interface_card = card
    succeeded = False

    if not card:
        interface_card = pyw.getcard(interface_name)

    try:
        pyw.chset(interface_card, channel)
    except pyric.error as error:
        LOGGER.warning("Failed to set {} to channel {}:\n{}".format(
            interface_name, channel, error))

    return succeeded


def find_interface(mode, exclude=[]):
    """
    """
    interface = None
    alternative_interface = None
    all_wireless_interfaces = pyw.winterfaces()
    result_tuple = collections.namedtuple("result",
                                          "status, interface_name, is_virtual")
    result = result_tuple(True, None, False)

    for wireless in all_wireless_interfaces:
        has_mode = has_modes(wireless, mode)

        if has_mode and wireless not in exclude:
            interface = wireless
            break
        elif not alternative_interface and has_mode:
            alternative_interface = wireless

    if interface:
        result.interface_name = interface
    elif alternative_interface:
        result.interface_name = alternative_interface
        result.is_virtual = True
    else:
        result.status = False

    return result


def setup_interfaces(monitor_interface=None,
                     ap_interface=None,
                     internet_interface=None):
    """
    """
    result_tuple = collections.namedtuple("result", [
        "status", "monitor_interface", "monitor_virtual", "ap_interface",
        "ap_virtual", "internet_interface", "error_message"
    ])
    result = result_tuple(True, None, False, None, False, None, None)

    if monitor_interface and ap_interface:
        if monitor_interface == ap_interface:
            result.status = False
            result.error_message = "Monitor interface and AP interface can not be the same"
        elif not is_interface_valid(monitor_interface, "monitor"):
            result.status = False
            result.error_message = "Monitor interface {} is invalid".format(
                monitor_interface)
        elif not is_interface_valid(ap_interface, "AP"):
            result.status = False
            result.error_message = "AP interface {} is invalid".format(
                ap_interface)
        else:
            result.monitor_interface = monitor_interface
            result.ap_interface = ap_interface
    elif monitor_interface:
        if is_interface_valid(monitor_interface, "monitor"):
            find_result = find_interface("AP", exclude=[monitor_interface])

            if find_result.status:
                result.status = True
                result.monitor_interface = monitor_interface
                result.ap_interface = find_result.interface_name
                result.ap_virtual = find_result.is_virtual
            else:
                result.status = False
                result.error_message = "Failed to find an interface with AP mode"
        else:
            result.status = False
            result.error_message = "Monitor interface {} is invalid".format(
                monitor_interface)
    elif ap_interface:
        if is_interface_valid(ap_interface, "AP"):
            find_result = find_interface("monitor", exclude=[ap_interface])

            if find_result.status:
                result.status = True
                result.ap_interface = ap_interface
                result.monitor_interface = find_result.interface_name
                result.monitor_virtual = find_result.is_virtual
            else:
                result.status = False
                result.error_message = "Failed to find an interface with monitor mode"
        else:
            result.status = False
            result.error_message = "AP interface {} is invalid".format(
                monitor_interface)
    else:
        find_mon_result = find_interface("monitor")
        find_ap_result = find_interface(
            "AP",
            exclude=[find_mon_result.interface_name]
            if find_mon_result.status else [])
        if not find_mon_result.status:
            result.status = False
            result.error_message = "Failed to find an interface with monitor mode"
        elif not find_ap_result.status:
            result.status = False
            result.error_message = "Failed to find an interface with AP mode"
        else:
            result.monitor_interface = find_mon_result.interface_name
            result.monitor_virtual = find_mon_result.is_virtual
            result.ap_interface = find_ap_result.interface_name
            result.ap_virtual = find_ap_result.is_virtual

    if internet_interface and result.status and not pyw.isinterface(internet_interface):
        result.status = False
        result.error_message = "Internet interface {} is invalid".format(internet_interface)

    return result


def is_interface_valid(interface_name, mode):
    """
    """
    return pyw.isinterface(interface_name) and has_modes(interface_name, mode)


def has_modes(interface, mode):
    """
    Return whether the provided interface has the provided modes

    :param interface: Name of the interface
    :param mode: Modes of operation
    :type interface: str
    :type mode: list
    :return: True if interface has the mode and False otherwise
    :rtype: bool
    :Example:

        >>> does_have_mode("wlan0", ["AP"])
        True

        >>> does_have_mode("wlan1", ["monitor", "AP"])
        False
    """
    card = pyw.getcard(interface)
    return mode in pyw.devmodes(card)
